const { chromium } = require('playwright');
const path = require('path');
const fs = require('fs');
const { acquireLock, releaseLock } = require('../utils/lock');
const { loginPipefy } = require('../utils/auth');
const { baixarArquivo } = require('../utils/downloads');

async function runRgpRobot(req, res) {
  res.setHeader('Content-Type', 'text/html; charset=utf-8');
  res.write('<pre>‚è≥ Aguardando 1 minuto para iniciar o rob√¥ RGP...\n');

  const log = (msg) => {
    res.write(`${msg}\n`);
    console.log(msg);
  };

  if (!acquireLock()) {
    log('‚õî Rob√¥ j√° est√° em execu√ß√£o.');
    return res.end('</pre>');
  }

  let browser;

  setTimeout(async () => {
    try {
      browser = await chromium.launch({
  headless: true,
  args: ['--no-sandbox', '--disable-setuid-sandbox']
});

      const context = await browser.newContext();
      const page = await context.newPage();

      await loginPipefy(page, log);

      log('üìÇ Acessando Pipe "RGP"...');
      await page.getByText('RGP', { exact: true }).click();
      await page.waitForTimeout(3000);

      const botaoEntrar = page.locator('text=Entrar no pipe');
      if (await botaoEntrar.count() > 0) {
        await botaoEntrar.first().click();
        await page.waitForTimeout(3000);
      }

      log('üÜï Criando novo card...');
      const span = await page.locator('span:text("Create new card")').first();
      await span.scrollIntoViewIfNeeded();
      await span.evaluate(el => el.click());
      await page.waitForTimeout(3000);

    // CLIENTE
log('üë§ Selecionando cliente...');
const botaoCliente = await page.locator('div:has-text("Cliente") >> :text("Criar registro")').first();
await botaoCliente.click();
await page.waitForSelector('input[placeholder*="Pesquisar"]', { timeout: 10000 }); // Espera o campo aparecer
await page.locator('input[placeholder*="Pesquisar"]').fill('143.461.936-25');
await page.waitForTimeout(1500);
await page.getByText('143.461.936-25', { exact: false }).first().click();
log('‚úÖ Cliente selecionado');
await page.waitForTimeout(1000);
     
// ‚úÖ Etapa: Fechar janela flutuante e posicionar a tela
log('üöó Preparando para selecionar CRLV...');

const campoEstavel = await page.locator('input[placeholder="Digite aqui ..."]').first();
await campoEstavel.scrollIntoViewIfNeeded();
await campoEstavel.click();
await page.waitForTimeout(1000);

// Scroll para garantir que a se√ß√£o CRLV esteja vis√≠vel
await page.keyboard.press('PageDown');
await page.waitForTimeout(1000);

// ‚úÖ Etapa: Selecionar bot√£o "Criar registro" do CRLV
log('üöó Selecionando CRLV...');
const botoesCriar = await page.locator('text=Criar registro');
const total = await botoesCriar.count();
log(`üß© Encontrados ${total} bot√µes 'Criar registro'`);

if (total >= 2) {
  const botaoCRLV = botoesCriar.nth(1); // segundo bot√£o geralmente √© o do CRLV
  const box = await botaoCRLV.boundingBox();

  if (box && box.width > 0 && box.height > 0) {
    await botaoCRLV.scrollIntoViewIfNeeded();
    await page.waitForTimeout(1000);
    await botaoCRLV.click();
    log('‚úÖ Bot√£o "Criar registro" do CRLV clicado com sucesso');
  } else {
    throw new Error('‚ùå Bot√£o do CRLV invis√≠vel ou mal renderizado!');
  }
} else {
  throw new Error('‚ùå Bot√£o de CRLV n√£o encontrado!');
}

// ‚úÖ Etapa: Preencher campo de busca do CRLV
try {
  await page.waitForSelector('input[placeholder*="Pesquisar"]', { timeout: 15000 });
  await page.locator('input[placeholder*="Pesquisar"]').fill('OPB3D62');
  await page.waitForTimeout(1500);

  const opcaoCRLV = await page.getByText('OPB3D62', { exact: false }).first();
  await opcaoCRLV.scrollIntoViewIfNeeded();
  await page.waitForTimeout(500);
  await opcaoCRLV.click();

  log('‚úÖ CRLV selecionado com sucesso');
} catch (e) {
  log('‚ùå Campo de pesquisa do CRLV n√£o apareceu ou falhou');

  const erroPath = path.resolve(__dirname, '../../prints/print_crlv_erro.jpg');
  if (!fs.existsSync(path.dirname(erroPath))) {
    fs.mkdirSync(path.dirname(erroPath), { recursive: true });
  }

  try {
    await page.screenshot({ path: erroPath, type: 'jpeg', quality: 80 });
    const base64Erro = fs.readFileSync(erroPath).toString('base64');
    res.write(`<h3>üñºÔ∏è Print de erro CRLV (JPG):</h3>`);
    res.write(`<img src="data:image/jpeg;base64,${base64Erro}" style="max-width:100%; border:1px solid #ccc;">`);
  } catch {
    log('‚ö†Ô∏è Falha ao salvar print de erro do CRLV');
  }

  throw new Error('‚ùå Falha ao selecionar CRLV');
}

      // OBSERVA√á√ÉO
      try {
  const valorObservacao = req.query.observacao || 'nada de observa√ß√µes';
  const campoObs = await page.getByLabel('Observa√ß√£o');
  await campoObs.scrollIntoViewIfNeeded();
  await campoObs.fill(valorObservacao);
  log('‚úÖ Observa√ß√£o preenchida');
} catch (e) {
  log('‚ùå Campo Observa√ß√£o n√£o encontrado ou ignorado');
}

     // üßæ Preenchendo campos AIT e √ìrg√£o Autuador
try {
  const inputs = await page.locator('input[placeholder="Digite aqui ..."]');
  await inputs.nth(0).scrollIntoViewIfNeeded();
  await inputs.nth(0).fill('AM09263379');
  log('‚úÖ AIT preenchido');

  await inputs.nth(1).scrollIntoViewIfNeeded();
  await inputs.nth(1).fill('Prefeitura de BH');
  log('‚úÖ √ìrg√£o Autuador preenchido');
} catch (e) {
  log('‚ùå Erro ao preencher AIT ou √ìrg√£o Autuador');
}
      log('üìÜ Preenchendo campo "Prazo para Protocolo"...');

try {
  const segmentoDia = await page.locator('[data-testid="day-input"]').first();
  const segmentoMes = await page.locator('[data-testid="month-input"]').first();
  const segmentoAno = await page.locator('[data-testid="year-input"]').first();
  const segmentoHora = await page.locator('[data-testid="hour-input"]').first();
  const segmentoMinuto = await page.locator('[data-testid="minute-input"]').first();

  await segmentoDia.click();
  await page.keyboard.type('09', { delay: 100 });

  await segmentoMes.click();
  await page.keyboard.type('06', { delay: 100 });

  await segmentoAno.click();
  await page.keyboard.type('2025', { delay: 100 });

  await segmentoHora.click();
  await page.keyboard.type('08', { delay: 100 });

  await segmentoMinuto.click();
  await page.keyboard.type('00', { delay: 100 });

  log('‚úÖ Prazo para Protocolo preenchido corretamente');
} catch (e) {
  log('‚ùå Erro ao preencher o campo Prazo para Protocolo');
}

      const urlPDF = 'https://www.africau.edu/images/default/sample.pdf';
      const nomePDF = 'anexo.pdf';
      const caminhoPDF = path.resolve(__dirname, nomePDF);
      await baixarArquivo(urlPDF, caminhoPDF);

      const botaoUpload = await page.locator('button[data-testid="attachments-dropzone-button"]').last();
      await botaoUpload.scrollIntoViewIfNeeded();
      const [fileChooser] = await Promise.all([
        page.waitForEvent('filechooser'),
        botaoUpload.click()
      ]);
      await fileChooser.setFiles(caminhoPDF);
      await page.waitForTimeout(3000);

      await page.keyboard.press('PageDown');
      await page.waitForTimeout(1000);
      await page.keyboard.press('PageDown');
      await page.waitForTimeout(1000);

      log('üöÄ Finalizando card...');
try {
  const botoes = await page.locator('button:has-text("Create new card")');
  const total = await botoes.count();
  for (let i = 0; i < total; i++) {
    const botao = botoes.nth(i);
    const box = await botao.boundingBox();
    if (box && box.width > 200 && box.height > 30) {
      await botao.scrollIntoViewIfNeeded();
      await page.waitForTimeout(500);
      await botao.click();
      break;
    }
  }

  await page.screenshot({ path: printFinalCRLV });
  log('üì∏ Print final do CRLV salvo como print_final_crlv_semrgp.png');
} catch (e) {
  log('‚ùå Erro ao finalizar o card ou tirar print');
}

// PRINT final
const caminhoPrint = path.resolve(__dirname, '../../prints/print_final_rgp.png');
if (!fs.existsSync(path.dirname(caminhoPrint))) {
  fs.mkdirSync(path.dirname(caminhoPrint), { recursive: true });
}
await page.screenshot({ path: caminhoPrint });
log(`üì∏ Print salvo como ${path.basename(caminhoPrint)}`);

await browser.close();

// üñºÔ∏è Mostra print de debug no navegador
const base64debug = fs.readFileSync(debugPath).toString('base64');
res.write('<h3>üñºÔ∏è Tela ap√≥s clicar em CRLV:</h3>');
res.write(`<img src="data:image/jpeg;base64,${base64debug}" style="max-width:100%; border:1px solid #ccc;">`);

res.end('</pre><h3>‚úÖ Processo RGP conclu√≠do com sucesso</h3><p><a href="/">‚¨ÖÔ∏è Voltar</a></p>');

} catch (err) {
  log(`‚ùå Erro cr√≠tico: ${err.message}`);

  const erroPath = path.resolve(__dirname, '../../prints/print_erro_debug.jpg');
  if (!fs.existsSync(path.dirname(erroPath))) {
    fs.mkdirSync(path.dirname(erroPath), { recursive: true });
  }

  try {
    if (page) {
      await page.screenshot({ path: erroPath, type: 'jpeg', quality: 80 });
      log(`üì∏ Print de erro salvo como ${path.basename(erroPath)}`);

      const base64Erro = fs.readFileSync(erroPath).toString('base64');
      res.write(`<h3>üñºÔ∏è Print do erro (JPG):</h3>`);
      res.write(`<img src="data:image/jpeg;base64,${base64Erro}" style="max-width:100%; border:1px solid #ccc;">`);
    } else {
      log('‚ö†Ô∏è P√°gina n√£o estava dispon√≠vel para capturar print.');
    }
  } catch (e) {
    log('‚ö†Ô∏è Falha ao gerar ou exibir o print de erro.');
  }

  if (page) {
  const erroPath = path.resolve(__dirname, '../../prints/print_erro_debug.jpg');
  await page.screenshot({ path: erroPath, type: 'jpeg', quality: 80 });
  const base64Erro = fs.readFileSync(erroPath).toString('base64');
  res.write(`<h3>üñºÔ∏è Print do erro (JPG):</h3>`);
  res.write(`<img src="data:image/jpeg;base64,${base64Erro}" style="max-width:100%; border:1px solid #ccc;">`);
}
if (browser) await browser.close();
res.end('</pre><p style="color:red"><b>‚ùå Erro ao executar rob√¥ RGP.</b></p>');

}
finally {
  releaseLock();
}
  }, 60000);
}

module.exports = { runRgpRobot };
