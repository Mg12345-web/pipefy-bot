const path = require('path');
const fs = require('fs');
const { runClientRobot } = require('./client');
const { runCrlvRobot } = require('./crlv');
const { runRgpRobot } = require('./rgp');
const { runSemRgpRobot } = require('./semrgp');

let fila = [];
let emExecucao = false;

function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

function addToQueue(tarefa) {
  fila.push(tarefa);
  console.log(`üì• Tarefa adicionada √† fila. Total na fila: ${fila.length}`);
}

function startQueue() {
  setInterval(() => {
    if (emExecucao || fila.length === 0) return;
    const tarefa = fila.shift();
    emExecucao = true;
    console.log('üöÄ Iniciando tarefa da fila...');
    processarTarefa(tarefa)
      .catch(err => console.error('‚ùå Erro ao processar tarefa:', err))
      .finally(() => {
        emExecucao = false;
      });
  }, 3000);
}

async function processarTarefa(tarefa) {
  const fakeRes = criarRespostaSimples();
  const req = {
    query: { observacao: 'Cadastro via site' },
    body: tarefa,
    files: tarefa.arquivos
  };

  // ‚úÖ CLIENTE
  try {
    console.log('\nüìå Executando rob√¥ de CLIENTES...');
    await runClientRobot(req, fakeRes);
    await aguardarEstabilizacao('CLIENTES');
  } catch (err) {
    console.error('‚ùå Erro no rob√¥ de CLIENTES:', err.message);
  }

  // ‚úÖ CRLV
  try {
    console.log('\nüìå Executando rob√¥ de CRLV...');
    await runCrlvRobot(req, fakeRes);
    await aguardarEstabilizacao('CRLV');
  } catch (err) {
    console.error('‚ùå Erro no rob√¥ de CRLV:', err.message);
  }

  // ‚úÖ AUTUA√á√ïES
  for (const autuacao of tarefa.autuacoes || []) {
    const tipo = autuacao.tipo;
    const fakeReq = {
      files: { autuacao: [{ path: autuacao.arquivo }] },
      body: {}
    };

    try {
      if (tipo === 'RGP') {
        console.log('\nüìå Executando rob√¥ de RGP...');
        await runRgpRobot(fakeReq, fakeRes);
        await aguardarEstabilizacao('RGP');
      } else if (tipo === 'Sem RGP') {
        console.log('\nüìå Executando rob√¥ de Sem RGP...');
        await runSemRgpRobot(fakeReq, fakeRes);
        await aguardarEstabilizacao('Sem RGP');
      } else {
        console.warn(`‚ö†Ô∏è Tipo desconhecido de autua√ß√£o: ${tipo}`);
      }
    } catch (err) {
      console.error(`‚ùå Erro no rob√¥ de ${tipo}:`, err.message);
    }
  }

  console.log('\n‚úÖ Tarefa finalizada.');
}

function criarRespostaSimples() {
  return {
    setHeader: () => {},
    write: (msg) => console.log('[LOG]', msg),
    end: (html) => html && console.log('[FIM]', html)
  };
}

// üß† Aguarda tempo fixo + simula√ß√£o de verifica√ß√£o visual
async function aguardarEstabilizacao(contexto) {
  console.log(`‚è≥ Aguardando 30 segundos ap√≥s o rob√¥ de ${contexto}...`);
  await delay(30000);
  console.log(`‚úÖ Tempo de estabiliza√ß√£o conclu√≠do para ${contexto}.\n`);
}

module.exports = { addToQueue, startQueue };
